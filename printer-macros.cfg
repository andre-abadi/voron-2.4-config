#####################################################################
#   Default Macros (Customised)
#####################################################################

[gcode_macro G32]
gcode:
    G28
    QUAD_GANTRY_LEVEL
    G28
    ##  Uncomment for for your size printer:
    #--------------------------------------------------------------------
    ##  Uncomment for 250mm build
    #G0 X125 Y125 Z30 F3600
    
    ##  Uncomment for 300 build
    G0 X150 Y150 Z30 F3600
    
    ##  Uncomment for 350mm build
    #G0 X175 Y175 Z30 F3600
    #--------------------------------------------------------------------

[gcode_macro PRINT_START]
#   Use PRINT_START for the slicer starting script - please customise for your slicer of choice
#
#   https://github.com/AndrewEllis93/Print-Tuning-Guide/blob/main/articles/passing_slicer_variables.md
#
gcode:
    # Parameters
    {% set bedtemp = params.BED|int %}
    {% set hotendtemp = params.HOTEND|int %}
    {% set chambertemp = params.CHAMBER|default(0)|int %}
    # Lights On
    SET_PIN PIN=caselight VALUE=1.0 ; turn on frame lights
    SET_LED LED=btt_mini12864 RED=1 GREEN=1 BLUE=0
    #SET_LED LED=btt_mini12864 RED=0.5 GREEN=0.5 BLUE=0.5
    # Start heating the bed
    #M140 S{bedtemp}
    # Start the exhaust fan
    {% if chambertemp > 0 %}
      SET_TEMPERATURE_FAN_TARGET TEMPERATURE_FAN=exhaust_fan TARGET=55
    {% endif %}
    # Enable filament sensor disabled by delayed Gcode below
    SET_FILAMENT_SENSOR SENSOR=filament_sensor ENABLE=1
    # Clear any bed meshes
    BED_MESH_CLEAR
    # start bed heating but don't wait for it
    M140 S{bed}
    # First Homing
    STATUS_HOMING                   ; SB LED
    SET_LED_EFFECT EFFECT=sb_logo_homing # klipper-led_effect
    G28                             ; xyz homing
    # Quad Gantry Level
    STATUS_LEVELING                 ; SB LED
    QUAD_GANTRY_LEVEL               ; quad gantry level
    # Moving to Front
    STATUS_HOMING                   ; SB LED
    G28                             ; xyz homing, again now that gantry is level
    STOP_LED_EFFECTS                # end klipper-led_effect
    FRONT_AND_CENTRE           ; move nozzle front and centre
    # Bed Heating
    STATUS_HEATING                  ; SB LED
    M190 S{bedtemp}                 ; set & wait for bed temp
    # Waiting for Chamber Min Heat
    #TEMPERATURE_WAIT SENSOR="temperature_fan exhaust_fan" MINIMUM={chambertemp}   ; wait for chamber temp
    # https://www.klipper3d.org/Status_Reference.html#temperature_fan
    {% if printer["temperature_fan exhaust_fan"].temperature < chambertemp %}
        HEATSOAK TARGET={chambertemp}
    {% endif %} 
    # Start meshing
    STATUS_MESHING                  ; SB LED
    SET_LED_EFFECT EFFECT=sb_logo_homing # klipper-led_effect
    # Auto Z Calibration
    #CALIBRATE_Z                     ; auto z calibration macro/script
    # Bed Mesh Calibration
    BED_MESH_CALIBRATE              ; do a bed mesh (should clear with PRINT_END)
    STOP_LED_EFFECTS                # end klipper-led_effect
    # Tap Hot Probe for Calibration of Z
    G0 X150 Y150 Z10
    M109 S150 # set nozzle to 150 max for Tap and under ooze temp
    G28 Z # home the Z axis to calibrate Z at temperature
    # Move over bucket for ooze
    BUCKET_POSITION
    # Final Hotend Heat Up
    STATUS_HEATING                  ; SB LED
    M109 S{hotendtemp}              ; set & wait for hotend temp
    # Clean Nozzle
    CLEAN_NOZZLE
    # LCD
    SET_LED LED=btt_mini12864 RED=1 GREEN=1 BLUE=1
    # Purge Line
    PURGE_LINE                      ; JoeCat1207's purge line macro
    # Start Print
    STATUS_PRINTING                 ; SB LED

[gcode_macro PRINT_END]
#   Use PRINT_END for the slicer ending script - please customise for your slicer of choice
gcode:
    M117                                                                         ; reset/clear the LCD and status message
    # conditional homing in case this was called outside a normal print end
    CG28
    # Start the exhaust fan
    # https://www.klipper3d.org/Status_Reference.html#temperature_fan
    {% if printer["temperature_fan exhaust_fan"].target > 0 %}
      {%set coolingtarget = printer["temperature_fan exhaust_fan"].target - 10%}
      SET_TEMPERATURE_FAN_TARGET TEMPERATURE_FAN=exhaust_fan TARGET={coolingtarget}
    {% endif %}
    # set LCD blue
    SET_LED LED=btt_mini12864 RED=0 GREEN=0 BLUE=1
    # SB LED
    STATUS_BUSY                     ; SB LED
    # safe anti-stringing move coords
    {% set th = printer.toolhead %}
    {% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}
    {% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}
    {% set z_safe = [th.position.z + 2, th.axis_maximum.z]|min %}
    SAVE_GCODE_STATE NAME=STATE_PRINT_END
    M400                           ; wait for buffer to clear
    G92 E0                         ; zero the extruder
    G1 E-5.0 F1800                 ; retract filament
    # Disable filament sensor enabled by print-start and disabled by default
    SET_FILAMENT_SENSOR SENSOR=filament_sensor ENABLE=0
    # Heaters Off
    TURN_OFF_HEATERS
    G90                                      ; absolute positioning
    STATUS_BUSY
    # Nozzle Clear of Print
    G0 X{x_safe} Y{y_safe} Z{z_safe} F20000  ; move nozzle to remove stringing
    # move to back
    G0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y - 2} F3600  ; park nozzle at rear
    # bring nozzle up
    #G0 Z{z_park} F3600
    # Moving to MIddle Top
    #G0 X150 Y150 Z230 F3600                  ; move nozzle front and centre
    # Clear any accumulated z calibration
    #SET_GCODE_OFFSET Z=0 MOVE=1
    # Clear any bed meshes
    BED_MESH_CLEAR
    # SB LED
    STATUS_COOLING
    # Dock probe if not already docked
    # this catches if print_end is called after a failed start
    # DOCK_PROBE # no longer needed with Tap
    # Full part fan until temp <100
    {% if printer["extruder"].temperature > 100 %}
        M106 S255                                         ; part fan full
    {% endif %}
    # Move over bucket for ooze if over ooze temp
    {% if printer["extruder"].temperature > 180 %}
        BUCKET_POSITION
        STATUS_COOLING
    {% endif %}
    {% if printer["extruder"].temperature > 200 %}
        STATUS_COOLING
        CLEAN_NOZZLE                                     # scrub 1
        STATUS_COOLING
        TEMPERATURE_WAIT SENSOR="extruder" MAXIMUM=200
        CLEAN_NOZZLE                                     # scrub 2
        STATUS_COOLING
    {% endif %}
    {% if printer["extruder"].temperature > 150 %}
        STATUS_COOLING
        TEMPERATURE_WAIT SENSOR="extruder" MAXIMUM=150
        CLEAN_NOZZLE                                      # scrub
        STATUS_COOLING
    {% endif %}
    {% if printer["extruder"].temperature > 100 %}
        STATUS_COOLING
        TEMPERATURE_WAIT SENSOR="extruder" MAXIMUM=100
        CLEAN_NOZZLE                                      # scrub 4
        STATUS_COOLING
    {% endif %}
    # Turn off the part fan
    M107                                              ; turn off fan
    G0 X150 Y305 Z100
    # turn off the exhaust_fan once the above temperature is reached
    #SET_TEMPERATURE_FAN_TARGET TEMPERATURE_FAN=exhaust_fan TARGET=0
    # came with default macro
    RESTORE_GCODE_STATE NAME=STATE_PRINT_END
    # SB LED
    STATUS_OFF                     ; SB LED
    SET_LED LED=btt_mini12864 RED=1 GREEN=1 BLUE=1
    SET_PIN PIN=caselight VALUE=0.25
    #SET_LED LED=btt_mini12864 RED=0 GREEN=0.1 BLUE=0
